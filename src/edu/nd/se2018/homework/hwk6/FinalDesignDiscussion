Michael Wang
October 16, 2018
Chip's Challenge Final Discussion + Description of final UML vs. Initial UML

Description of final UML vs. Initial UML
Initially I only had one observer pattern which was the map observing chip and a strategy pattern which was the same in the final UML. I was planning on having another strategy pattern Items which acted as an interface for when items were picked up and there would be different items that could be picked up. Instead, I created another observer pattern class which consisted of a Backpack class which observed Chip which was also observed by Map. This allowed for easy storage of items into the backpack which chip had an instance of so that chip always knew how many chips or keys were currently being carried. This also was beneficial to allowing the map to be updated whenever a key or chip was picked up so that the map could update its existing tile. 

Final Discussion

Explanation of final design:
In my final design, I have a main class, map, chip, and backpack class, and level strategy interface with two concrete classes level1 and level2. The map class observes the backpack and gets updated whenever the backpack receives a key or chip for example. The backpack class observes chip and adds items to it whenever chip steps on a map tile which contains an item. I intially set the level to a new level1 level strategy and this changes to a new level2 level strategy when chip reaches the portal of level1. The map class handles all of the creation of the levels and sets the level strategy. The main class adds observers, creates the first level1 level strategy, updates chip according to the player's keyboard inputs, and starts the game. The Chip class has methods which allow it to move, notifiy the observers to clear the tile, and also notifies the observers where chip currently is. The backpack class observes what tile chip is on and adds to item variables accordingly. It will also notify the map to update the current tile to be blank because the item is picked up! The two concrete level strategy classes create the map in unique ways by randomly generating chips and keys and their colors as well as the boundaries for the map itself, where chip starts, and where the portal and keywall go.

What I would have done differently:
Overall, I'd say my final design could use some improvement in terms of scalability, but I really like how I used two observer patterns to allow chip to have a backpack which observes chips movements, as well as a map which observes the backpack to for whenever it was updated. It was a bit complicated, but I like how chip almost "carries" the backpack class around as a way to store items. One of the major refactorings that I would have done would have to be the way I created the levels. Although I separated the levels which changed into two different concrete classes which were connected to a level strategy interface, the method createMap inside each of the levels didn't favor object composition as much as I wanted to. Each tile was represented as a number within the 2D map grid and I think I would have created a tile object which could call methods as to initialize what type of tile it was rather than having so many numbers being represented. While this change would have made the code more clean and easier to understand, I think that it would have taken a lot of time to redo all of my code and I was already almost finished by the time I came up with this idea. Also, when I was finished I was a bit unsure of the directions as to three design patterns because I included two observer and one strategy pattern, but perhaps I could have tried to incorporate another unique design pattern to add diversity to my design patterns. I interpretted having three design patterns as using three design patterns rather than three unique design patterns. Another thing I would have done differently was to make my maps more complex. I did random generation of chips and keys and walls (including their color) which I thought was neat because no two maps would ever be the same in terms of chip and key placement. However, this made the game a bit simple because the user didn't have to think too hard on how to beat the level. In order to incorporate this change, I would have had to have implemented tile objects rather than numbers or else it would have been very complicated. I also always only had one keywall with one key and a portal directly above this keywall. I would have to change the way I created keywalls and the algorithms behind unlocking each keywall if I added let's say 5 or more keys and walls. This would also affect chip and key generation as well. I also might have considered adding enemies or perhaps different types of boots for different types of tiles in order to add complexity and difficulty to the game. If I were to start from scratch, perhaps I could have merged the backpack and chip class together in a better way than I had done too. 

